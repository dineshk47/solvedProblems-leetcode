Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

A subarray is a contiguous part of an array.

nums = [-2,1,-3,4,-1,2,1,-5,4]

# here we need to find the max of contiguous subarrays

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        # intializing the first maxSub
        maxSub = nums[0]
        # holding the curSum value and if curSum is -ve we reset the curSum to 0 else we add the element to curSum
        curSum = 0
        for n in nums:
            if curSum <0:
                curSum =0
            curSum += n
            # finding the max between the curSum and the MaxSub
            maxSub = max(curSum, maxSub)
        return maxSub
